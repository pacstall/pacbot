// This file is generated by https://generator.cynic-rs.dev/
// GitHub GraphQL schema is available at: https://docs.github.com/public/schema.docs.graphql

#[cynic::schema_for_derives(file = r#"src/graphql/github.graphql"#, module = "schema")]
pub mod queries {
    use super::schema;

    #[derive(cynic::QueryVariables, Debug)]
    pub struct ListIssuesQueryVariables {
        pub states: Option<Vec<IssueState>>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "Query", variables = "ListIssuesQueryVariables")]
    pub struct ListIssuesQuery {
        #[arguments(name: "pacstall-programs", owner: "pacstall")]
        pub repository: Option<Repository>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(variables = "ListIssuesQueryVariables")]
    pub struct Repository {
        #[arguments(last: 100, filterBy: { labels: ["major update", "minor update", "patch update"], states: $states })]
        pub issues: IssueConnection,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct IssueConnection {
        pub page_info: PageInfo,
        pub nodes: Option<Vec<Option<Issue>>>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct PageInfo {
        pub has_next_page: bool,
        pub end_cursor: Option<String>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct Issue {
        pub number: i32,
        pub title: String,
        pub url: Uri,
        pub state_reason: Option<IssueStateReason>,
    }

    #[derive(cynic::Enum, Clone, Copy, Debug)]
    pub enum IssueState {
        Closed,
        Open,
    }

    #[derive(cynic::Enum, Clone, Copy, Debug)]
    pub enum IssueStateReason {
        Completed,
        NotPlanned,
        Reopened,
    }

    #[derive(cynic::Scalar, Debug, Clone)]
    #[cynic(graphql_type = "URI")]
    pub struct Uri(pub String);
}

#[allow(non_snake_case, non_camel_case_types)]
mod schema {
    cynic::use_schema!(r#"src/graphql/github.graphql"#);
}

#[cfg(test)]
#[allow(clippy::wildcard_imports)]
mod tests {
    use cynic::QueryBuilder;
    use insta::assert_snapshot;

    use super::queries::*;

    #[test]
    fn list_issues_query_gql_output() {
        assert_snapshot!(
            ListIssuesQuery::build(ListIssuesQueryVariables {
                states: Some(vec![IssueState::Open])
            })
            .query
        );
    }
}
